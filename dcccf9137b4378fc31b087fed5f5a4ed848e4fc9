{
  "comments": [
    {
      "key": {
        "uuid": "7c12d7f7_3ed708ad",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 93
      },
      "writtenOn": "2019-03-11T09:02:34Z",
      "side": 1,
      "message": "to restore",
      "range": {
        "startLine": 22,
        "startChar": 25,
        "endLine": 22,
        "endChar": 36
      },
      "revId": "dcccf9137b4378fc31b087fed5f5a4ed848e4fc9",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93b3238b_50c8e9d2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 6870
      },
      "writtenOn": "2019-03-11T11:31:32Z",
      "side": 1,
      "message": "Thanks for pointing it out, fixed.",
      "parentUuid": "7c12d7f7_3ed708ad",
      "range": {
        "startLine": 22,
        "startChar": 25,
        "endLine": 22,
        "endChar": 36
      },
      "revId": "dcccf9137b4378fc31b087fed5f5a4ed848e4fc9",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08e063fa_64bda348",
        "filename": "MessageGroups.php",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 93
      },
      "writtenOn": "2019-03-11T09:02:34Z",
      "side": 1,
      "message": "This is quite a large amount of code that is executed with warnings suppressed.\n\nDoesn\u0027t the version field alone guarantee that we will not try to unserialize incompatible data?",
      "revId": "dcccf9137b4378fc31b087fed5f5a4ed848e4fc9",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9d922ff_bf7618f1",
        "filename": "MessageGroups.php",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 6870
      },
      "writtenOn": "2019-03-11T11:31:32Z",
      "side": 1,
      "message": "I was hoping that that would be the case, but unfortunately the version is stored along with the data.\n\n```\n\u003e\u003e\u003e $c-\u003eget( $c-\u003emakeKey( \"translate-groups\" ) );\n\u003d\u003e [\n     \"WOC:d\" \u003d\u003e DependencyWrapper {#1153},\n     \"WOC:v\" \u003d\u003e 2,\n   ]\n```\n\nThe documentation here - https://doc.wikimedia.org/mediawiki-core/master/php/classWANObjectCache.html#a821b0db090c0650793e41183cbb188f7 states that,\n\n\u003e New versions are stored alongside older versions concurrently. *Avoid storing class objects however, as this reduces compatibility (due to serialization)*\n\nOn another note during my testing, I did not see the old version retained anymore. \n\nThe other options would be,\n\n1. To clearly mention in the release notes that there will be warnings appearing the first time after plugin update and will go with a subsequent refresh.\n2. To use an extension update hook to get rid of the current cache value entirely.",
      "parentUuid": "08e063fa_64bda348",
      "revId": "dcccf9137b4378fc31b087fed5f5a4ed848e4fc9",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "080a0991_33802cdc",
        "filename": "MessageGroups.php",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 93
      },
      "writtenOn": "2019-03-11T15:28:28Z",
      "side": 1,
      "message": "The documentation is right about *Avoid storing class objects*, but I don\u0027t want to include fixing that in this commit.\n\nHave you tried adding it directly to the dependency wrapper using ConstantDependency?\n\nIf we make the version actually be part of the cache key, then we could easily have both old and new version available simultaneously. The downside of course is that they can get stale because manual purges would only affect one of them. I don\u0027t think that will cause any issues though, as such setup is not something that is officially supported.",
      "parentUuid": "a9d922ff_bf7618f1",
      "revId": "dcccf9137b4378fc31b087fed5f5a4ed848e4fc9",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b2fd105_e17a0841",
        "filename": "MessageGroups.php",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 6870
      },
      "writtenOn": "2019-03-12T11:43:49Z",
      "side": 1,
      "message": "\u003e Have you tried adding it directly to the dependency wrapper using ConstantDependency?\n\nAs per my understanding of the ConstantDependency class, I\u0027m not sure how this will help since we save the entire Dependency wrapper inside the cache and it will have to be unserialized to get to the value.\n\n\u003e If we make the version actually be part of the cache key\n\nThis will allow us to avoid the warnings since we will essentially be trying to retrieve the value using a separate key but how will the data in the older key get cleaned up?\n\n\u003e The documentation is right about *Avoid storing class objects*, but I don\u0027t want to include fixing that in this commit.\n\nShould I go ahead and create a task for this? (if its not already there)",
      "parentUuid": "080a0991_33802cdc",
      "revId": "dcccf9137b4378fc31b087fed5f5a4ed848e4fc9",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21faa8fb_09ff0d92",
        "filename": "MessageGroups.php",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 93
      },
      "writtenOn": "2019-03-12T12:17:44Z",
      "side": 1,
      "message": "1) I see, that\u0027s not helpful then.\n\n2) The key has an expiry. The caches are expected to clean up expired keys periodically.\n\n3) Yes sure, I don\u0027t remember such task existing yet.",
      "parentUuid": "1b2fd105_e17a0841",
      "revId": "dcccf9137b4378fc31b087fed5f5a4ed848e4fc9",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f1ca958_5431e83d",
        "filename": "MessageGroups.php",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 6870
      },
      "writtenOn": "2019-03-12T15:04:49Z",
      "side": 1,
      "message": "2. Correct, should have inferred that. Though some caches that I\u0027ve dealt with before delete expired keys only when accessed.\n\nThe key will now be translate-groups-v2. I\u0027ve also removed WANObjectCache versioning for now.\n\n3. Will create the task. We can revisit the WANObjectCache versioning along with this task.",
      "parentUuid": "21faa8fb_09ff0d92",
      "revId": "dcccf9137b4378fc31b087fed5f5a4ed848e4fc9",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a27a9e7_85799a97",
        "filename": "MessageGroups.php",
        "patchSetId": 3
      },
      "lineNbr": 248,
      "author": {
        "id": 93
      },
      "writtenOn": "2019-03-11T09:02:34Z",
      "side": 1,
      "message": "I am not convinced we need to populate the page_id for the title objects. The Title class can fetch it on demand. If that is a performance issue, we could add batchloading of it.\n\nHaving said that, wouldn\u0027t it be easier if we stored the id in the serialization instead? Then we wouldn\u0027t need to complicate code in this class.",
      "revId": "dcccf9137b4378fc31b087fed5f5a4ed848e4fc9",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "635cf71b_4da87fea",
        "filename": "MessageGroups.php",
        "patchSetId": 3
      },
      "lineNbr": 248,
      "author": {
        "id": 6870
      },
      "writtenOn": "2019-03-11T11:31:32Z",
      "side": 1,
      "message": "The `ArticleID` is used in the `getDefinitions` method inside the WikiPageMessageGroup class. Like you said its not needed and can be fetched when required but as it was bound earlier, I decided to leave it.\n\nAnother motivation for implementing the change this way was that `Title::loadFromRow` actually binds a bunch of other properties and if in the future we needed more of those properties to be bound, we could cache them by simply adding them in the array here. I will add this in the commit message.\n\nI\u0027ve not changed this for now, let me know if you\u0027d like it to be removed.",
      "parentUuid": "2a27a9e7_85799a97",
      "revId": "dcccf9137b4378fc31b087fed5f5a4ed848e4fc9",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "076feffc_dbe2063c",
        "filename": "MessageGroups.php",
        "patchSetId": 3
      },
      "lineNbr": 248,
      "author": {
        "id": 93
      },
      "writtenOn": "2019-03-11T15:28:28Z",
      "side": 1,
      "message": "One reason I don\u0027t like this change is that it seems to violate module boundaries. This class MessageGroups should not have intimate knowledge how different message groups behave. The exception is this static method which knows how to construct them (and could in fact be split to a separate factory).\n\nAnother reason I don\u0027t like this is that I would rather see in the long run that WikiPageMessageGroup doesn\u0027t rely on Title, but something more simple like TitleValue value object.",
      "parentUuid": "635cf71b_4da87fea",
      "revId": "dcccf9137b4378fc31b087fed5f5a4ed848e4fc9",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37981055_5a7831d1",
        "filename": "MessageGroups.php",
        "patchSetId": 3
      },
      "lineNbr": 248,
      "author": {
        "id": 6870
      },
      "writtenOn": "2019-03-12T11:43:49Z",
      "side": 1,
      "message": "For now I\u0027ve removed the addition of the `row` value. We will let ArticleID be fetched on demand for now.\n\nUpdated test cases accordingly.",
      "parentUuid": "076feffc_dbe2063c",
      "revId": "dcccf9137b4378fc31b087fed5f5a4ed848e4fc9",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f1af597_d69f0994",
        "filename": "messagegroups/MessageGroup.php",
        "patchSetId": 3
      },
      "lineNbr": 124,
      "author": {
        "id": 93
      },
      "writtenOn": "2019-03-11T09:02:34Z",
      "side": 1,
      "message": "Probably doesn\u0027t belong into this commit, but if we want to keep it, string[] would be more exact.",
      "revId": "dcccf9137b4378fc31b087fed5f5a4ed848e4fc9",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed76aa13_a359ded3",
        "filename": "messagegroups/MessageGroup.php",
        "patchSetId": 3
      },
      "lineNbr": 124,
      "author": {
        "id": 6870
      },
      "writtenOn": "2019-03-11T11:31:32Z",
      "side": 1,
      "message": "Yea but VSCode was warning me about this hence decided to add it.\n\n```\nexpecting array, getting null\n```\n\nCan `string[]` be used for an associative array?",
      "parentUuid": "9f1af597_d69f0994",
      "revId": "dcccf9137b4378fc31b087fed5f5a4ed848e4fc9",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1c3ffcc_5bb1fd42",
        "filename": "messagegroups/MessageGroup.php",
        "patchSetId": 3
      },
      "lineNbr": 124,
      "author": {
        "id": 93
      },
      "writtenOn": "2019-03-12T12:17:44Z",
      "side": 1,
      "message": "Looking at existing code, even associative arrays having string values use string[].",
      "parentUuid": "ed76aa13_a359ded3",
      "revId": "dcccf9137b4378fc31b087fed5f5a4ed848e4fc9",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc1f4ed3_09071dcc",
        "filename": "messagegroups/MessageGroup.php",
        "patchSetId": 3
      },
      "lineNbr": 124,
      "author": {
        "id": 6870
      },
      "writtenOn": "2019-03-12T15:04:49Z",
      "side": 1,
      "message": "Changed.",
      "parentUuid": "e1c3ffcc_5bb1fd42",
      "revId": "dcccf9137b4378fc31b087fed5f5a4ed848e4fc9",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "95d3de0f_0beaf08f",
        "filename": "messagegroups/WikiPageMessageGroup.php",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 93
      },
      "writtenOn": "2019-03-11T09:02:34Z",
      "side": 1,
      "message": "In the dump I see a bunch of other keys:\n\n        [\"definitions\":protected]\u003d\u003e\n        NULL\n        [\"source\":protected]\u003d\u003e\n        NULL\n        [\"optional\":protected]\u003d\u003e\n        array(0) {\n        }\n        [\"ignored\":protected]\u003d\u003e\n        array(0) {\n        }\n        [\"description\":protected]\u003d\u003e\n        NULL\n        [\"meta\":protected]\u003d\u003e\n        bool(false)\n        [\"mangler\":protected]\u003d\u003e\n        NULL\n        [\"messages\":protected]\u003d\u003e\n        array(0) {\n        }\n\nDid you check these are restored appropriately? The ones that default to null are probably fine, but what about the ones defaulting to an empty array?",
      "revId": "dcccf9137b4378fc31b087fed5f5a4ed848e4fc9",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6256d0af_eb29ebab",
        "filename": "messagegroups/WikiPageMessageGroup.php",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 6870
      },
      "writtenOn": "2019-03-11T11:31:32Z",
      "side": 1,
      "message": "Yes this is tested. These are all their default values. The new dump has an additional serialized property. \n\nOn an unrelated note, while I was reviewing the dump, I noticed that the mArticleID inside the Title class was set to -1. This is fixed now.\n\nI\u0027ve also added some more assertions to the test cases.",
      "parentUuid": "95d3de0f_0beaf08f",
      "revId": "dcccf9137b4378fc31b087fed5f5a4ed848e4fc9",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ae2577e_6f207987",
        "filename": "messagegroups/WikiPageMessageGroup.php",
        "patchSetId": 3
      },
      "lineNbr": 208,
      "author": {
        "id": 93
      },
      "writtenOn": "2019-03-11T09:02:34Z",
      "side": 1,
      "message": "What does return do in unserialize? Doesn\u0027t this mean that we will now have an instance with missing properties? Should we fail fast or at least log this thing?",
      "revId": "dcccf9137b4378fc31b087fed5f5a4ed848e4fc9",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ffa2b7c4_c601b29c",
        "filename": "messagegroups/WikiPageMessageGroup.php",
        "patchSetId": 3
      },
      "lineNbr": 208,
      "author": {
        "id": 6870
      },
      "writtenOn": "2019-03-11T11:31:32Z",
      "side": 1,
      "message": "Now throwing an exception when this happens.",
      "parentUuid": "3ae2577e_6f207987",
      "revId": "dcccf9137b4378fc31b087fed5f5a4ed848e4fc9",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}